generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "mysql"
	url      = env("DATABASE_URL")
}


enum JobType {
	FULL_TIME
	PART_TIME
	CONTRACT
	INTERNSHIP
}

enum ApplicationStatus {
	APPLIED
	SHORTLISTED
	REJECTED
	HIRED
}

enum DocumentType {
	CV
	DIPLOMA
	CERTIFICATE
}

model User {
	id           Int               @id @default(autoincrement())
	full_name    String
	national_id  String            @unique
	email        String            @unique
	role         Role
	password     String
	created_at   DateTime          @default(now())

	company      Company?
	applications Application[]
	profile      EmployeeProfile?
	documents    EmployeeDocument[]

	@@map("users")
}

model Company {
	id          Int      @id @default(autoincrement())
	name        String
	description String?
	website     String?
	owner_id    Int      @unique
	created_at  DateTime @default(now())
	updated_at  DateTime @updatedAt

	owner User  @relation(fields: [owner_id], references: [id], onDelete: Cascade)
	jobs  Job[]

	@@map("companies")
}

model Job {
	id            Int       @id @default(autoincrement())
	title         String
	description   String
	requirements  String?
	location      String?
	salary        String?
	type          JobType   @default(FULL_TIME)
	deadline      DateTime?
	company_id    Int
	created_at    DateTime  @default(now())
	updated_at    DateTime  @updatedAt

	company       Company   @relation(fields: [company_id], references: [id], onDelete: Cascade)
	applications  Application[]

	@@map("jobs")
}

model Application {
	id           Int               @id @default(autoincrement())
	user_id      Int
	job_id       Int
	status       ApplicationStatus @default(APPLIED)
	cover_letter String?
	applied_at   DateTime          @default(now())

	user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
	job  Job  @relation(fields: [job_id], references: [id], onDelete: Cascade)

	@@map("applications")
}

model EmployeeProfile {
	id         Int      @id @default(autoincrement())
	user_id    Int      @unique
	phone      String?
	location   String?
	education  String?
	skills     String?
	experience String?
	updated_at DateTime @updatedAt

	user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

	@@map("employee_profiles")
}

model EmployeeDocument {
	id          Int           @id @default(autoincrement())
	user_id     Int
	file_name   String?
	file_path   String?
	file_type   DocumentType?
	uploaded_at DateTime      @default(now())

	user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

	@@map("employee_documents")
}

model Admin {
	id         Int      @id @default(autoincrement())
	email      String   @unique
	password   String
	created_at DateTime @default(now())

	@@map("admins")
}

enum Role {
  EMPLOYEE
  EMPLOYER
  ADMIN
}

model Announcement {
	id             Int       @id @default(autoincrement())
	title          String
	content        String
	expiration_date DateTime?
	created_at     DateTime  @default(now())

	@@map("announcements")
}

